{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/errorboundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","username","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","Errorboundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"uLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCYCQ,EAjBF,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,GAAIC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,MAE/B,OACI,sBAAKC,UAAW,sDAAhB,UACI,qBAAKC,IAAK,QAAQC,IAAG,+BAA4BN,EAA5B,cAErB,gCACI,6BAAKC,IACL,4BAAIC,IACJ,4BAAIC,WCYLI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACA,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAQ,cAAC,EAAD,CACJX,GAAIQ,EAAOG,GAAGX,GACdC,KAAMO,EAAOG,GAAGV,KAChBC,SAAUM,EAAOG,GAAGT,SACpBC,MAAOK,EAAOG,GAAGR,OAJFQ,SCOpBC,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACA,qBAAKV,UAAU,OAAf,SACI,uBAAOA,UAAW,mCAClBW,KAAM,SACNC,YAAY,gBACZC,SAAUH,OCEHI,G,MATA,SAACC,GACZ,OACI,qBAAKC,MAAQ,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,aCyBJC,E,kDA1BX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,qDAMlB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WAEQ,IAAGG,KAAKJ,MAAMC,SAMd,OAAOG,KAAKX,MAAMK,a,GAnBFQ,aCmDbC,E,kDA7CX,aAAc,IAAD,8BACT,gBAgBJC,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,QAGzCC,QAAQC,IAAIJ,EAAMC,OAAOC,QApBzB,EAAKX,MAAO,CACRlB,OAAQ,GACRK,YAAa,IAJR,E,qDASb,WAAoB,IAAD,OACf2B,MAAM,8CAA8C/C,MAAK,SAAAgD,GAAc,OAAOA,EAASC,UACtFjD,MAAK,SAAAkD,GACF,EAAKZ,SAAU,CAACvB,OAAQmC,S,oBAahC,WAAS,IAAD,OACJ,EAA+Bb,KAAKJ,MAA7BlB,EAAP,EAAOA,OACDoC,GADN,EAAe/B,YACQL,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKtB,MAAMb,YAAYkC,mBAEpE,OAAQvC,EAAOyC,OAGX,sBAAK7C,UAAU,KAAf,UACG,oBAAIA,UAAY,KAAhB,0BADH,IAEG,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAFjC,IAGG,cAAC,EAAD,UAAQ,cAAC,EAAD,UAAe,cAAC,EAAD,CAAU1B,OAAQoC,WAL3C,6C,GAhCKZ,aCGlBkB,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAUhD/D,M","file":"static/js/main.a7fadb1e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = ({id, name, username, email}) =>{\r\n    \r\n    return(\r\n        <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt ='photo' src = {`https://robohash.org/${id}?100x100`} />\r\n\r\n            <div>\r\n                <h4>{name}</h4>\r\n                <p>{username}</p>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n//import CardList from './CardList'\r\n\r\nconst CardList = ({robots}) => {\r\n   \r\n    return(\r\n    <div>\r\n        {\r\n            robots.map((user, i)=>{\r\n                return (<Card key={i}\r\n                    id={robots[i].id}\r\n                    name={robots[i].name} \r\n                    username={robots[i].username}\r\n                    email={robots[i].email}/>\r\n                );\r\n            })\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) =>{\r\n    return (\r\n    <div className='pa2 '>\r\n        <input className= 'pa3 ba b--green bg-lightest-blue' \r\n        type= 'search' \r\n        placeholder='Search Robots' \r\n        onChange={searchChange}\r\n        />\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style ={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nclass Errorboundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n    \r\n    render() {\r\n        \r\n            if(this.state.hasError){\r\n                return \r\n                    <h1> Ooops, Thats not good </h1>\r\n                \r\n                    \r\n            }\r\n            return this.props.children\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Errorboundary;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n//import {robots} from './robots';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport Errorboundary from '../components/errorboundary';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state= {\r\n            robots: [ ],\r\n            searchfield: ''\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => { return response.json();})\r\n        .then(users => {\r\n            this.setState ({robots: users})\r\n        })\r\n        \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        \r\n        this.setState({searchfield: event.target.value})\r\n        \r\n\r\n        console.log(event.target.value);\r\n    }\r\n\r\n    render(){\r\n        const {robots, searchfield } = this.state; \r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        return !robots.length?\r\n             <h1>Loading</h1>:\r\n         ( \r\n            <div className='tc'>\r\n               <h1 className = 'f1'>Robo Friends</h1>,\r\n               <SearchBox searchChange={this.onSearchChange}/>,\r\n               <Scroll><Errorboundary><CardList robots={filteredRobots}/></Errorboundary></Scroll> \r\n            </div> \r\n               );\r\n    }\r\n   \r\n}\r\n\r\n\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\n//import CardList from './CardList'; \nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n//import {robots} from './robots';\nimport App from './containers/App';\n//import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n\n\n//registerServiceWorker();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}